#!/usr/bin/env node

/* command line interface for nextaur */

const fs = require('fs');
const program = require('commander');
const columnify = require('columnify')
const Migrator = require('./server/migrator');

const dummyMigration =
	`module.exports = {
	up: () => {
		return new Promise((resolve, reject) => {
			// Describe how to achieve the task.
			// Call resolve/reject at some point.
		});
	},

	down: () => {
		return new Promise((resolve, reject) => {
			// Describe how to revert the task.
			// Call resolve/reject at some point.
		});
	}
};
`

let executed = false;

program
	.command('create <name>')
	.alias('c')
	.description('Create a new empty migration file')
	.action(name => {
		executed = true;

		// construct iso time in format: yyyymmddhhmm
		let dateTime = new Date().toISOString().replace(/T/, '').replace(/\..+/, '').replace(/-/g, '').replace(/:[^:]+$/, '').replace(/:/g, '');
		let filename = `migrations/${dateTime}-${name}.js`;


		try {
			// save dummy migration
			fs.writeFileSync(filename, dummyMigration, err => {});
			console.log(`Successfully created '${filename}'`);
		}
		catch (err) {
			console.log(`Error: ${err.message}.\nMake sure the folder does exist.`);
		}
	});

program
	.command('status')
	.alias('s')
	.description('Show current migration status')
	.action(async() => {
		executed = true;

		console.log(`STATUS`)
		let migrator = new Migrator();
		let pending = await migrator.getPending();

		if (pending.length === 0) {
			console.log(`Everything up to date.`)
		}
		else {
			console.log(`${pending.length} pending migrations. Please run "./nac upgrade".`);
		}
	});

let optionAll = false;
let optionPending = false;
program
	.command('list')
	.alias('l')
	.description('List executed migrations')
	.option('-a, --all', 'List all migrations', () => optionAll = true)
	.option('-p, --pending', 'List pending migrations', () => optionPending = true)
	.action(async() => {
		executed = true;

		let migrator = new Migrator();
		let pendingMigrations = await migrator.getPending();
		let executedMigrations = await migrator.getExecuted();

		let migrations;
		if (optionAll) {
			console.log("All Migrations:")

			migrations = pendingMigrations.concat(executedMigrations);
			migrations.sort((a, b) => {
				return parseInt(a.file) - parseInt(b.file);
			})
		}
		else if (optionPending) {
			console.log("Pending Migrations:")
			migrations = pendingMigrations;
		}
		else {
			console.log("Executed Migrations:")
			migrations = executedMigrations;
		}

		let data = [];
		migrations.forEach(migration => {
			// check if migration was already executed
			let status = pendingMigrations.some(pendingMigration => {
				return pendingMigration["file"] === migration.file;
			}) ? "Pending" : "Executed";

			data[data.length] = {
				file: migration.file,
				status: status,
			};
		});

		console.log(columnify(data));
	});

program
	.command('upgrade')
	.alias('u')
	.description('Apply all pending migrations')
	.action(async() => {
		executed = true;

		let migrator = new Migrator();
		try {
			let status = await migrator.upgrade();
			console.log(`Successfully upgraded ${status.length} Migrations.`);
		}
		catch (err) {
			console.log(`Error: ${err.message}`);
		}
	});

program
	.command('downgrade <file>')
	.alias('d')
	.description('Downgrade the given migration')
	.action(async(file) => {
		executed = true;

		let migrator = new Migrator();
		try {
			let status = await migrator.downgrade(file);
			console.log(`Successfully downgraded "${file}".`);
		}
		catch (err) {
			console.log(`Error: ${err.message}`);
		}
	});

program
	.parse(process.argv);

if (!executed) {
	program.help()
}
